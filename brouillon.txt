
fs.readFile('dev/shm/rainCounter.log','utf8', function(err, data){

  //readind data file
  const content = data.split('.');
  const contentDateSplit = content[0].split('T')
  const time = new Date(contentDateSplit [0] +' '+ contentDateSplit[1]).getTime();
  
  // data request
  influx.queryRaw('select * from rainfall').then(results => {

    // test if data in rainfall
    if(results["results"][0]["series"]){

      const lengthResult = results["results"][0]["series"][0]["values"].length
      const lasTimestampMeausre = results["results"][0]["series"][0]["values"][lengthResult-1][1]

      if(lasTimestampMeausre != time){

      
    
        const duree = (time - lasTimestampMeausre)/60000

        let timestampMeasure = parseInt(lasTimestampMeausre)
        let numberBucket = 0

        fs.readFile('countBucket.txt', 'utf8' , (err, data) => {
          if (err) {
            console.error(err)
            return
          }
          numberBucket = parseInt(data)
        })

        if (numberBucket == 0){
          let rainValue = 0
        }
        else{

          let rainValue = duree/(3.8*numberBucket)
        }

        for (let i = 0; i < duree; i++) {

          timestampMeasure = timestampMeasure + 60000

          influx.writePoints([
            {
              measurement: 'rainfall',
              fields: { date:timestampMeasure, value:rainValue }
            }
          ])
        }  
    }else{

      const duree = (time - Date.now())/60000

      for (let i = 0; i < duree; i++) {

        timestampMeasure = timestampMeasure + 60000

        influx.writePoints([
          {
            measurement: 'rainfall',
            fields: { date:timestampMeasure, value:0 }
          }
        ])
      }  

      
    } 
    }else{

      influx.writePoints([
        {
          measurement: 'rainfall',
          fields: { date:time, value:3.8 }
        }
      ])

    }
  })
})